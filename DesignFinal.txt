Function Name: Menu
Parameters: None
Return: menu_choice
Algorithm:
1. Output options: "What type of sport: football, quidditch, gymnast:"
2. Ask user to choose: menu_choice variable("Please enter a valid sport type.")
3. Return menu_choice


Function Name: int_check
Parameters: int
Return: true or false
Algorithm:
1. If int_check is int:
    a. Return true
2. Otherwise:
    a. Return False


Function Name: football
Parameters: interceptions, completions, attempts, passing_yards, touchdown_passes
Return: football_score
Algorithm:
1. Ask user to input interceptions: ("Please enter your number of interceptions made.")
2. Call int_check to check for valid interger
3. Return interceptions
4. Ask user to input completions: ("Please enter your number of completions made.")
5. Call int_check to check for valid interger
6. Return completions
7. Ask user to input attempts: ("Please enter your number of attempts made.")
8. Call int_check to check for valid interger
9. Return attempts
10. Ask user to input passing_yards: ("Please enter your number of passing yards made.")
11. Call int_check to check for valid interger
12. Return passing_yards
13. Ask user to input touchdown_passes: ("Please enter your number of touchdown passes made.")
14. Call int_check to check for valid interger
15. Return touchdown_passes
16. Calculate football_score: ("100 * [5(completions/attempts – 0.3) + 0.25(passing_yards/attempts-3) +
  20(touchdown_passes/attempts) + 2.375 – (25 * interceptions/attempts)]/6")
17. Return football_score


Function Name: quidditch
Parameters: goal, snitch
Return: quidditch_score
Algorithm:
1. Ask user to input goals: ("Please enter your number of goals made.")
2. Call int_check to check for valid interger
3. Return goal
4. Calculate quidditch_score: "(10(goal)"
5. Ask user to input snitch: ("Did you catch the golden snitch? yes or no?")
6. Call int_check to check for valid interger
7. If snitch is equal to "yes"
    a. Add 30 to quidditch_score
8. Else:
    a. Add 0 to quidditch_score
9. Return snitch
11. Return quidditch_score


Function Name: gymnast
Parameters: difficulty, execution1, execution2, execution3, execution4, execution5
Return: Calculation of Parameters
Algorithm:
1. Ask user to input difficulty: ("Please enter difficulty score.")
2. Call float_check to check for valid float
3. Return difficulty
4. Call execution1 function
5. Call float_check to check for valid float
6. Return execution1
7. Call execution2 function
8. Call float_check to check for valid float
9. Return execution2
10. Call execution3 function
11. Call float_check to check for valid float
12. Return execution3
13. Call execution4 function
14. Call float_check to check for valid float
15. Return execution4
16. Call execution5 function
17. Call float_check to check for valid float
18. Return execution5
19. Call for min_value for calculation
20. Call for max-value for calculation
21. Calculate average_executions: "((execution1 + execution2 + execution3 + execution4 + execution5) - (min_value +
max_value)) / 5 "
22. Calculate_Gym = "(difficulty) + (average_executions)"
23. Return Calculation_Gym

Function Name: execution
Parameters: None
Return: execution
Algorithm:
1. Ask user to input execution: ("Please enter execution score."))
2. Return execution

Function Name: float_check
Parameters: float
Return: true or false
Algorithm:
1. If float_check is float:
    a. Return true
2. Otherwise:
    a. Return False

Function Name: calculate_min
Parameters: execuation1, execuation2, execuation3, execuation4, execuation5
Return: min_value
Algorithm:
1. Set min_value to execuation1
2. If execuation2 is less than min_value:
    a. Set min_value to execuation2
3. If execuation3 is less than min_value:
    a. Set min_value to execuation3
4. If execuation4 is less than min_value:
    a. Set min_value to execuation4
5. If execuation5 is less than min_value:
    a. Set min_value to execuation5
6. Return min_value

Function Name: calculate_max
Parameters: execuation1, execuation2, execuation3, execuation4, execuation5
Return: max_value
Algorithm:
1. Set max_value to execuation1
2. If execuation2 is greater than max_value:
    a. Set max_value to execuation2
3. If execuation3 is greater than max_value:
    a. Set max_value to execuation3
4. If execuation4 is greater than max_value:
    a. Set max_value to execuation4
5. If execuation5 is greater than max_value:
    a. Set max_value to execuation5
6. Return max_value


Function Name: Main
Parameters: None
Return: None
Algorithm:
1. Tell the user the purpose of the program: "This program will calculate various sports statistics for the user, based
on the user’s choice of sport."
2. Call menu
3. Call error_check_menu
4. If error_check_menu is equal to "false":
    a. Output error message: "Sorry your answer is invalid, please try again."
    b. Go back to Step 2 #In main function
5. If menu_choice is equal to "football":
    a. Call football
    b. Output: ("Your football QB rating is", football_score)
    c. If football_score is equal to 158.3
        i.Output: "You are a perfect passer."
    d. Otherwise:
        a. Output: "Sorry, you are not considered a perfect passer."
6. Otherwise/If menu_choice is equal to "quidditch":
    a. Call quidditch
    b. Output: ("Your score for Quidditch is", quidditch_score)
7. Otherwise:
    a. Call gymnast
    b. Output: ("Your final score is", Calculation_Gym)
8. Output: "Thank you for using this program."

## Run the Program ##
main()



