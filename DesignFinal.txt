Function Name: Menu
Parameters: None
Return: menu_choice
Algorithm:
1. Output options: "What type of sport: football, quidditch, gymnast:"
2. Ask user to choose: menu_choice variable("Please enter a valid sport type.")
3. Otherwise/If menu_choice is equal to "football":
    a. menu_choice = football
4. Otherwise/If menu_choice is equal to "quidditch":
    a. menu_choice = quidditch
5. Otherwise:
    a. menu_choice = gymnast
6. Return menu_choice


Function Name: error_check_menu
Parameters: menu_choice
Return: true or false
Algorithm:
1. If menu_choice is equal to "football" :
    a. return true
2. Otherwise/If menu_choice is equal to "quidditch" :
    a. return true
3. Otherwise/If menu_choice is equal to "gymnast" :
    a. return true
4. Otherwise:
    a. return false


Function Name: football
Parameters: interceptions, completions, attempts, passing_yards, touchdown_passes
Return: football_score
Algorithm:
1. Call interceptions function
2. Call int_check to check for valid interger
3. If int_check == true:
    a. continue on
4. Otherwise:
    a. Output: ("Error! Invalid Answer.")
    b. Return 0
5. Call completions function
6. Call int_check to check for valid interger
7. If int_check == true:
    a. continue on
8. Otherwise:
    a. Output: ("Error! Invalid Answer.")
    b. Return 0
9. Call attempts function
10. Call int_check to check for valid interger
11. If int_check == true:
    a. continue on
12. Otherwise:
    a. Output: ("Error! Invalid Answer.")
    b. Return 0
13. Call passing_yards function
14. Call int_check to check for valid interger
15. If int_check == true:
    a. continue on
16. Otherwise:
    a. Output: ("Error! Invalid Answer.")
    b. Return 0
17. Call touchdown_passes function
18. Call int_check to check for valid interger
19. If int_check == true:
    a. continue on
20. Otherwise:
    a. Output: ("Error! Invalid Answer.")
    b. Return 0
21. Calculate football_score: ("100 * [5(completions/attempts – 0.3) + 0.25(passing_yards/attempts-3) +
  20(touchdown_passes/attempts) + 2.375 – (25 * interceptions/attempts)]/6")
22. Return football_score

Function Name: interceptions
Parameters: None
Return: interceptions
Algorithm:
1. Ask user to input interceptions: ("Please enter your number of interceptions made.")
2. Return interceptions

Function Name: completions
Parameters: None
Return: completions
Algorithm:
1. Ask user to input completions: ("Please enter your number of completions made.")
2. Return completions

Function Name: attempts
Parameters: None
Return: attempts
Algorithm:
1. Ask user to input attempts: ("Please enter your number of attempts made.")
2. Return attempts

Function Name: passing_yards
Parameters: None
Return: passing_yards
Algorithm:
1. Ask user to input passing_yards: ("Please enter your number of passing yards made.")
2. Return passing_yards

Function Name: touchdown_passes
Parameters: None
Return: touchdown_passes
Algorithm:
1. Ask user to input touchdown_passes: ("Please enter your number of touchdown passes made.")
2. Return touchdown_passes


Function Name: quidditch
Parameters: goal, snitch
Return: quidditch_score
Algorithm:
1. Call goal function
2. Call int_check to check for valid interger
3. If int_check is equal to
    a. quidditch_score: "(10(goal)"
4. Otherwise:
    a. Output: "Error! Invalid Answer."
    b. return 0
5. Ask user to input: "Did you catch the Golden snitch, yes or no?"
6. If snitch is equal to "yes":
    a. Add 30 to Calculation_Quid
7. Otherwise/If snitch is equal to "no":
    a. Do nothing
8. Otherwise:
    a. Output: "Error! Invalid Answer."
    b. Return 0
9. Return quidditch_score

def quidditch(goals, snitch):
    goals = goals()
    int_check()
    if int_check == "true":
        quidditch_score = 10(goals)
    else:
        print("Error! Invalid Answer.")
        return 0
    snitch = snitch()
    if snitch == "yes":
        quidditch_score += 30
    elif snitch =="no":
        quidditch_score += 0
    else:
        print("Error! Invalid Answer.")
        return 0
    return quidditch_score


Function Name: int_check
Parameters: int
Return: true or false
Algorithm:
1. If int_check is int:
    a. Return true
2. Otherwise:
    a. Return False


Function Name: gymnast
Parameters: difficulty, execution1, execution2, execution3, execution4, execution5
Return: Calculation of Parameters
Algorithm:
1. Ask user to input Parameter: "difficulty"
2. Call int_check to check for valid interger
3. If valid:
    a. Continue on
4. Otherwise:
    a. Output: "Error! Invalid Answer."
    b. return 0
5. Ask user to input Parameter: "execution1"
6. Call int_check to check for valid interger
7. If valid:
    a. Continue on
8. Otherwise:
    a. Output: "Error! Invalid Answer."
    b. return 0
9. Ask user to input Parameter: "execution2"
10. Call int_check to check for valid interger
11. If valid:
    a. Continue on
12. Otherwise:
    a. Output: "Error! Invalid Answer."
    b. return 0
13. Ask user to input Parameter: "execution3"
14. Call int_check to check for valid interger
15. If valid:
    a. Continue on
16. Otherwise:
    a. Output: "Error! Invalid Answer."
    b. return 0
17. Ask user to input Parameter: "execution4"
18. Call int_check to check for valid interger
19. If valid:
    a. Continue on
20. Otherwise:
    a. Output: "Error! Invalid Answer."
    b. return 0
21. Ask user to input Parameter: "execution5"
22. Call int_check to check for valid interger
23. If valid:
    a. Continue on
24. Otherwise:
    a. Output: "Error! Invalid Answer."
    b. return 0
25. Check for min_value for calculation
26. Check for max-value for calculation
27. Calculate average_executions: "((execution1 + execution2 + execution3 + execution4 + execution5) - (min_value +
max_value)) / 5 "
28. Calculate_Gym = "(difficulty) + (average_executions)"
29. Return Calculation_Gym


Function Name: calculate_min
Parameters: execuation1, execuation2, execuation3, execuation4, execuation5
Return: min_value
Algorithm:
1. Set min_value to execuation1
2. If execuation2 is less than min_value:
    a. Set min_value to execuation2
3. If execuation3 is less than min_value:
    a. Set min_value to execuation3
4. If execuation4 is less than min_value:
    a. Set min_value to execuation4
5. If execuation5 is less than min_value:
    a. Set min_value to execuation5
6. Return min_value


Function Name: calculate_max
Parameters: execuation1, execuation2, execuation3, execuation4, execuation5
Return: max_value
Algorithm:
1. Set max_value to execuation1
2. If execuation2 is greater than max_value:
    a. Set max_value to execuation2
3. If execuation3 is greater than max_value:
    a. Set max_value to execuation3
4. If execuation4 is greater than max_value:
    a. Set max_value to execuation4
5. If execuation5 is greater than max_value:
    a. Set max_value to execuation5
6. Return max_value


Function Name: Main
Parameters: None
Return: None
Algorithm:
1. Tell the user the purpose of the program: "This program will calculate various sports statistics for the user, based
on the user’s choice of sport."
2. Call menu
3. Call error_check_menu
4. If error_check_menu is equal to "false":
    a. Output error message: "Sorry your answer is invalid, please try again."
    b. Go back to Step 2 #In main function
5. If menu_choice is equal to "football":
    a. Call football
    b. Output: ("Your football QB rating is", football_score)
    c. If football_score is equal to 158.3
        i.Output: "You are a perfect passer."
    d. Otherwise:
        a. Output: "Sorry, you are not considered a perfect passer."
6. Otherwise/If menu_choice is equal to "quidditch":
    a. Call quidditch
    b. Output: ("Your score for Quidditch is", quidditch_score)
7. Otherwise:
    a. Call gymnast
    b. Output: ("Your final score is", Calculation_Gym)
8. Output: "Thank you for using this program."



